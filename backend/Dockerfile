# --- Стадия 1: Сборщик (Builder) ---
# Используем легковесный образ с Go для компиляции нашего приложения.
FROM golang:1.24-alpine AS builder

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем файлы зависимостей и скачиваем их.
# Этот шаг кешируется Docker, и зависимости не будут скачиваться заново,
# если go.mod/go.sum не менялись.
COPY go.mod go.sum ./
RUN go mod download

# Копируем остальной исходный код.
COPY . .

# Собираем приложение.
# -o /app/main - выходной файл
# -ldflags="-w -s" - уменьшает размер бинарного файла
# CGO_ENABLED=0 - создает статически скомпилированный бинарный файл
RUN CGO_ENABLED=0 go build -ldflags="-w -s" -o /app/main ./cmd/app

# --- Стадия 2: Финальный образ ---
# Используем самый минимальный базовый образ.
FROM alpine:latest

# Копируем скомпилированное приложение из стадии сборщика.
COPY --from=builder /app/main /app/main

# Копируем директории, необходимые для работы приложения в рантайме.
COPY ./config /config
COPY ./migrations /migrations

# Указываем порт, который будет слушать наше приложение.
EXPOSE 8080

# Команда для запуска приложения при старте контейнера.
CMD ["/app/main"]